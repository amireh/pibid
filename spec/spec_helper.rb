$LOAD_PATH << File.join(File.dirname(__FILE__), '..')

ENV['RACK_ENV'] = 'test'

require 'rspec'
require 'rack/test'
require 'rack/utils'
require 'app'


# Pibi RC wrapper
module PibiRCMatchers
  class Fail
    def initialize(*keywords)
      @keywords = (keywords || []).flatten
    end

    def matches?(prc)
      @prc = prc

      res = true

      if prc.resp.status == 200
        return false
      end

      if prc.rc["result"] != 'error'
        return false
      end

      res = true

      if @keywords && @keywords.any?
        if @keywords.size == 1
          @keywords = @keywords.first.split(/\s/)
        end

        @keywords = Regexp.new(@keywords.join('.*'))

        if prc.rc["message"].is_a?(Array)
          matched = false
          prc.rc["message"].each { |m|
            if m.match(@keywords)
              matched = true
              break
            end
          }

          # matched.should == true
          res = res && matched

        elsif prc.rc["message"].is_a?(String)
          res = res && prc.rc["message"].match(@keywords)
        end
      end

      res
    end # Fail#matches

    def failure_message
      "expected #{@prc.rc['result']} to be 'error', and (#{@prc.rc['message']}) to match '#{@keywords}'"
    end
    def negative_failure_message
      "expected #{@prc.rc['result']} not to be 'error', and (#{@prc.rc['message']}) not to match '#{@keywords}'"
    end
  end # Fail

  def fail(*keywords)
    Fail.new(keywords)
  end
end

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus => true

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
  config.include Rack::Test::Methods

  def app
    Sinatra::Application
  end

  config.include PibiRCMatchers

end

module RSpec
  module Core
    module DSL
      alias_method :feature, :describe
    end
    class ExampleGroup
      class << self
        alias_method :scenario, :it
      end
    end
  end
end


class PRC
  attr_reader :resp, :rc

  def initialize(rack_response)
    @resp = rack_response
    @rc   = JSON.parse(rack_response.body.empty? ? '{}' : rack_response.body)
  end
end # PRC

def prc(rack_response)
  PRC.new(rack_response)
end

def mockup_user_params
  @some_salt = Pibi.salt
  @mockup_user_params = {
    name: 'Mysterious Mocker',
    email: 'very@mysterious.com',
    provider: 'pibi',
    password:               User.encrypt(@some_salt),
    password_confirmation:  User.encrypt(@some_salt)
  }
end

def mockup_user(q = {})
  User.destroy
  @user     = @u = User.create(mockup_user_params.merge(q))
  @account  = @a = @user.accounts.first
end
